bash
======================
变量的命名与赋值
------------------------
变量按作用域分为：局部变量和环境变量（全局变量)。

- 局部变量设置:

  * 通过简单赋值: ``a=1``， **等号前后不能有任何空白符** 。
  * 内置函数 ``declare`` （不含-x选项）
  * 内置函数 ``local`` ，但仅限于函数内使用。函数不使用 ``local`` 的变量在整个shell中可见

- 环境变量设置:

  * ``declare -x``
  * ``export varname=value``

变量的引用： ``$var`` 或 ``${var}`` ，两者在不引起歧义时等价。

位置和特殊参量
-------------------------

===============  =============================
 位置和特殊参量          指代对象
===============  =============================
  $0              脚本名
  $#              位置参数个数
  $*              所有的位置参数
  $@              未加引号时与$*的含义相同
  $1...${N}       单独的位置变量
  $$              当前 shell 的 PID
  $-              当前的 sh 选项设置
  $?              已执行的上一条命令的退出值
  $!              最后一个进入后台的作业 PID
  $_              上一条命令的最后一个参数
===============  =============================

:说明: ``$*`` 是一个由所有位置参量组成的单一的字符串,由环境变量 IFS 第一个字符分隔;相当于 ``$1c$2c...`` , c 是 IFS 的第一个字符;$@是 N 个独立的双引字符串,由空格分隔,即相当于 ``"$1" "$2" ... "$N"`` 。



开启、关闭shell特性
-----------------------------
set
**********
::

  set -o noclobber  # 开启noclobber特性
  set +o noclobber  # 关闭noclobber特性
  set -o            # 列出所有set控制的每一项特性及其状态
  set +o            # 以特殊方式列出上述特性

shopt
******************
::

  shopt -s dotglob  # -s 设置
  shopt -u dotglob  # -u 取消设置
  shopt -o -s noclobber # -o 设置由set控制的特性
  shopt             # 列出shopt控制的选项
  shopt -s          # 列出shopt设置开启的特性
  shopt -u          # 列出shopt设置取消的特性


配置Readline库
-----------------------------
使用Readline库的bash和其他程序都会读取由INPUTRC环境变量指定的文件，以获取初始化信息。如果没有设置INPUTRC，这些程序将从文件 ``~/.inputrc`` 中读取，忽略其以空白行或以#开头的行。

变量
**************
::

  set veriable value

键绑定
**************
用户可以用以下两种方式，指定按键序列到Readline命令的映射绑定。
::

  keyname: command_name
  " Keystroke_sequence ": command_name

比如::

  control-u: kill-whole-line

第二种形式中可以使用反斜杠转义序列来描述特殊的键如：CONTROL(\\C)、META(\\M)、ESCAPE(\\e)

使用 ``bind -P`` 命令显示所有Readline命令列表，vi模式下使用的命令均以vi开头，其余的则在emacs模式下可用，使用 ``bind -P command_name`` 查看某命令绑定的按键序列。

可以用双引号将文本括起来（只在emacs模式下可用），以绑定该文本::

  "LOS": "The Linux Operating System"

使用该命令后，当用户输入LOS时，bash就会插入相应字符串。

条件结构
*******************
语法如下：

.. code-block:: bash

   $if [test[=value]]
              commands
         [$else
              commands
   $endif

其中，**test** 为mode、term或bash。如：

.. code-block:: bash

   $if mode=vi
   $if term=xterm
   $if bash

别名
--------------------------
bash下使用语法：

.. code-block:: bash

   alias [name[=value]] #等号左右没有空格或制表符，value两边必须有括号
   alias ls='ls -F'     #别名不替换自己，避免可能存在的无限递归。
   #别名中若使用双引号，则引号内容中的变量将进行扩展，单引号则不会。
   #使用./command或执行该命令的绝对路径名将阻止shell调用别名。
   alias                #查看已定义的别名

数组
----------------
bash支持一维数组，默认下标从0开始：

.. code-block:: bash

   names=([2]=alice [0]=hatter [1]=duchess)
   names=(hatter duchess alice)
   names=(hatter [5]=duchess alice) #names[0]=hatter names[5]=duchess names[6]=alice
   #下标为1,2,3,4的元素不存在
   # 引用格式:
   ${array[i]}

   for i in "${array[@]}";do   # ${array[@]}或${array[*]} 获取所有元素
        echo $i
   done

   ${!array[@]} # 获取有元素的下标，如开头第三个数组有值的下标：0,5,6
   ${#array[@]} 或 ${#array[*]} # 获取非NULL元素个数

函数
--------------------
shell函数存放在物理内存(RAM)中而不是磁盘文件中，因此，shell访问函数的数度快于访问脚本的速度，而且shell还对函数预处理，启动速度也比脚本快的多。shell函数的执行和调用实在同一个shell中进行，而脚本中若定义太多函数，启动一个子shell的开销将变得很大。

shell函数声明可以放在 ``~/.bash_profile`` 或使用该函数的脚本中，也可直接放在命令行中。使用unset命令删除变量和函数。

函数声明：

.. code-block:: bash

   [function] function-name ()
   {
	commands
   }


命令行扩展
--------------------
花括号扩展
****************
.. code-block:: bash

   echo chap_{one,two,three}.txt
   mkdir var{A,B,C} # mkdir var[A-C]不可行
   #花括号里至少要有一个逗号并且没有未引用的空白字符，可以嵌套使用

算术扩展
******************
.. code-block:: bash

   $(())
   $((expression))  # 计算expression，可作为参数传递给命令或命令行任何数字位置上
   read age
   $((60-age))
   $((2*$x+2*$y))
   $((2*x+2*y)) #等价于上式

   let 内置命令
   let "number=$(wc -l < letter.txt)/66 +1"
   let a=5+3 b=7+2
   let "i= i+2"  # 带空格需要加引号

   # 使用let或$(())进行算术扩展时，引用变量可以不在变量名前加$符号，但推荐加。

   declare –i num
   num=hello   #error!
   num=5 + 5   #error!不能有空格
   num="4 * 6" #带引号,可以有空格
   num=6.789   #num=6 去尾

let支持的操作符：

=====================   =====================
操作符                    含    义
=====================   =====================
\-                      负号
!                       逻辑非
~                       按位取反
\*                      乘法
/                       除法
%                       求模
\+                      加法
\-                      减法
<<                      左移位
>>                      右移位
``<= >= < > == !=``     关系运算符
&                       按位与
^|                      异或
&&                      逻辑与
||                      逻辑或
!                       逻辑非
=                       赋值
``*= /= %= += -=``
``<<= >>= &= ^= |=``    赋值简写符
``++ --``               自增 自减
\**                     乘方
expr?expr:expr          条件表达式
expr1,expr2             逗号表达式
=====================   =====================

命令扩展
***********************
.. code-block:: bash

   #两种方式
   $(command)
   ` command` # 这里是反引号，非单引号

   a=$(pwd)

